package net.vino9.demo.decisionengine;

import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.drools.core.event.DebugAgendaEventListener;
import org.drools.core.event.DebugRuleRuntimeEventListener;
import org.drools.decisiontable.DecisionTableProviderImpl;
import org.kie.api.KieServices;
import org.kie.api.builder.KieFileSystem;
import org.kie.api.builder.KieRepository;
import org.kie.api.builder.ReleaseId;
import org.kie.api.io.Resource;
import org.kie.api.runtime.KieContainer;
import org.kie.api.runtime.KieSession;
import org.kie.internal.builder.DecisionTableConfiguration;
import org.kie.internal.builder.DecisionTableInputType;
import org.kie.internal.builder.KnowledgeBuilderFactory;
import org.kie.internal.io.ResourceFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
@Service
public class DecisionService {
    @Value("${app.decision-table-xls}")
    private String decisionTableXls;

    private KieContainer kContainer;

    public Customer getDecision(Customer input) {
        KieSession ksession = this.kContainer.newKieSession();
        if (log.isDebugEnabled()) {
            ksession.addEventListener(new DebugRuleRuntimeEventListener());
            ksession.addEventListener(new DebugAgendaEventListener());
        }

        ksession.insert(input);
        ksession.fireAllRules();
        ksession.dispose();

        return input;
    }

    @PostConstruct
    public void init() {
        Resource resource = ResourceFactory.newClassPathResource(decisionTableXls, getClass());
        this.kContainer = getKieContainer(resource);
    }


    private String getDrlFromXls(Resource dt) {
        DecisionTableConfiguration configuration = KnowledgeBuilderFactory.newDecisionTableConfiguration();
        configuration.setInputType(DecisionTableInputType.XLS);
        DecisionTableProviderImpl decisionTableProvider = new DecisionTableProviderImpl();
        return decisionTableProvider.loadFromResource(dt, configuration);
    }

    private KieContainer getKieContainer(Resource dt) {
        KieServices kieServices = KieServices.Factory.get();

        // when writing XLS directly to KieFileSystem, the system deson't show
        // any compilation errors. So we compile XLS to DRL first, then write to
        // KieFileSystem. This way the compilation errors will be displayed at
        // the  buildAll() step.
        // DO NOT DO THIS: KieFileSystem kieFileSystem = kieServices.newKieFileSystem().write(dt);

        String drl = getDrlFromXls(dt);
        log.info("DRL generated from decision table: \n{}", drl);

        String drlFilePath = getDrlFileName(drl);

        // the path must match the rule set name
        String packagePath = this.getClass().getPackageName().replace(".", "/");
        KieFileSystem kieFileSystem = kieServices.newKieFileSystem().write("src/main/resources/" + drlFilePath, drl);
        kieServices.newKieBuilder(kieFileSystem).buildAll();
        KieRepository kieRepository = kieServices.getRepository();
        ReleaseId krDefaultReleaseId = kieRepository.getDefaultReleaseId();
        return kieServices.newKieContainer(krDefaultReleaseId);
    }

    private String getDrlFileName(String drl) {
        Path path = Paths.get(decisionTableXls);
        String baseName = path.getFileName().toString() + ".drl";

        // DRL generated by excel compiler begins with "package" keyword
        // take the package name and convert it to path of the DRL file
        String firstLine = drl.split("\n")[0];
        Pattern pattern = Pattern.compile("package\\s+(.*);");
        Matcher matcher = pattern.matcher(firstLine);

        if (matcher.find()) {
            String packageName = matcher.group(1);
            String fileName = "/" + packageName.replace(".", "/") + "/" + baseName;
            log.info("DRL file name: {}", fileName);
            return fileName;
        }

        throw new RuntimeException("Cannot find package name in DRL");
    }
}
